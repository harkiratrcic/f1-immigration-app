// F1 Immigration inc. Client Intake System
// Database schema for production-ready client management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User management for firm staff
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(STAFF)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  assigned_files File[]
  audit_logs     AuditLog[]

  @@map("users")
}

enum Role {
  ADMIN
  STAFF
}

// Client information
model Client {
  id              String    @id @default(cuid())
  uci             String?   // Unique Client Identifier from IRCC
  full_name       String
  date_of_birth   DateTime?
  primary_email   String
  phone_number    String?   // Primary phone number
  current_country String?
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  files File[]

  @@map("clients")
}

// Immigration file/case
model File {
  id               String     @id @default(cuid())
  client_id        String
  type             FileType
  status           FileStatus @default(INTAKE)
  ircc_stream      String?    // e.g., "Express Entry", "PNP", etc.
  assigned_to_user_id String?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  // Relations
  client            Client         @relation(fields: [client_id], references: [id], onDelete: Cascade)
  assigned_to_user  User?          @relation(fields: [assigned_to_user_id], references: [id])
  form_instances    FormInstance[]

  @@map("files")
}

enum FileType {
  WORK_PERMIT
  VISITOR_SUPERVISA
  PERMANENT_RESIDENCE
}

enum FileStatus {
  INTAKE
  IN_PROGRESS
  SUBMITTED
  CLOSED
}

// Form template definitions
model FormTemplate {
  id          String  @id @default(cuid())
  code        FormCode @unique
  title       String
  description String
  sections    Json     // Structured form definition
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  questions      Question[]
  form_instances FormInstance[]

  @@map("form_templates")
}

enum FormCode {
  WP // Work Permit
  SV // Super Visa / Visitor
  PR // Permanent Residence
}

// Individual questions within templates
model Question {
  id             String      @id @default(cuid())
  template_id    String
  key            String      // Stable identifier (e.g., "full_name")
  label          String
  type           QuestionType
  required       Boolean     @default(false)
  options        Json?       // For select/radio/checkbox options
  conditional    Json?       // Conditional display logic
  help_text      String?
  order_index    Int
  created_at     DateTime    @default(now())

  // Relations
  template FormTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@unique([template_id, key])
  @@map("questions")
}

enum QuestionType {
  text
  textarea
  date
  radio
  checkbox
  select
  country
  email
  phone
  file
}

// Form instance for a specific client/file
model FormInstance {
  id             String               @id @default(cuid())
  file_id        String
  template_id    String
  status         FormInstanceStatus   @default(DRAFT)
  schema_version String               @default("1.0")
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt

  // Relations
  file           File         @relation(fields: [file_id], references: [id], onDelete: Cascade)
  template       FormTemplate @relation(fields: [template_id], references: [id])
  answers        Answer[]
  invites        Invite[]
  audit_logs     AuditLog[]
  consents       Consent[]

  @@map("form_instances")
}

enum FormInstanceStatus {
  DRAFT
  SENT
  OPEN
  SUBMITTED
  ARCHIVED
}

// Client answers to questions
model Answer {
  id          String   @id @default(cuid())
  instance_id String
  question_key String
  value       Json     // Flexible storage for any answer type
  updated_at  DateTime @updatedAt

  // Relations
  instance FormInstance @relation(fields: [instance_id], references: [id], onDelete: Cascade)

  @@unique([instance_id, question_key])
  @@map("answers")
}

// Secure invitation system
model Invite {
  id          String    @id @default(cuid())
  instance_id String
  email       String
  token       String    @unique
  expires_at  DateTime
  used_at     DateTime?
  sent_at     DateTime?
  opened_at   DateTime?
  created_at  DateTime  @default(now())

  // Relations
  instance FormInstance @relation(fields: [instance_id], references: [id], onDelete: Cascade)

  @@map("invites")
}

// Audit trail
model AuditLog {
  id          String    @id @default(cuid())
  actor_user_id String?
  instance_id String?
  action      String
  meta        Json      // Additional context
  ip_address  String?
  created_at  DateTime  @default(now())

  // Relations
  actor_user User?         @relation(fields: [actor_user_id], references: [id])
  instance   FormInstance? @relation(fields: [instance_id], references: [id])

  @@map("audit_logs")
}

// Legal consent tracking
model Consent {
  id               String   @id @default(cuid())
  instance_id      String
  text_hash        String   // Hash of consent text for verification
  accepted_at      DateTime
  esign_name       String
  esign_timestamp  DateTime
  ip_address       String
  created_at       DateTime @default(now())

  // Relations
  instance FormInstance @relation(fields: [instance_id], references: [id], onDelete: Cascade)

  @@map("consents")
}